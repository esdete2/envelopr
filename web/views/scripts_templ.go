// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func scripts() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\n        const EVENTS_ENDPOINT = '/_events';\n        const RECONNECT_DELAY = 100;\n\n        let eventSource;\n        let reconnectAttempts = 0;\n\n        function createEventSource() {\n            const source = new EventSource(EVENTS_ENDPOINT);\n\n            source.addEventListener('message', handleMessage);\n            source.addEventListener('error', handleError);\n            source.addEventListener('open', handleOpenConnection);\n\n            return source;\n        }\n\n        function handleOpenConnection(event) {\n            console.log('EventSource connection established.');\n            reconnectAttempts = 0; // Reset reconnect attempts on successful connection\n        }\n\n        function handleMessage(event) {\n            if (event.data !== 'reload') {\n                return;\n            }\n\n            const preview = document.getElementById('template-preview');\n            if (preview && preview.contentWindow) {\n                console.log('Reloading preview...');\n                preview.contentWindow.location.reload();\n            } else {\n                console.log('Reloading page...');\n                window.location.reload();\n            }\n        }\n\n        function handleError(event) {\n            if (event.target.readyState === EventSource.CLOSED) {\n                console.error('Connection closed by the server.');\n            } else {\n                console.error('EventSource encountered an error:', event);\n            }\n            reconnect();\n        }\n\n        function reconnect() {\n            const delay = Math.min(2 ** reconnectAttempts * RECONNECT_DELAY, 5000);\n            reconnectAttempts++;\n            console.log(`Reconnection attempt ${reconnectAttempts} in ${delay / 1000} seconds...`);\n\n            if (eventSource) {\n                cleanupEventSource(eventSource);\n            }\n\n            setTimeout(() => {\n                eventSource = createEventSource();\n            }, delay);\n        }\n\n        function cleanupEventSource(source) {\n            if (!source) return;\n\n            source.removeEventListener('message', handleMessage);\n            source.removeEventListener('error', handleError);\n            source.removeEventListener('open', handleOpenConnection);\n            source.close();\n\n            console.log('EventSource connection cleaned up.');\n        }\n\n        document.addEventListener('DOMContentLoaded', () => {\n            if (!window.EventSource) {\n                console.error('EventSource is not supported in this browser.');\n                return;\n            }\n\n            eventSource = createEventSource();\n        });\n\n        // Cleanup when page is unloaded\n        window.addEventListener('beforeunload', () => {\n            if (eventSource) {\n                cleanupEventSource(eventSource);\n            }\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
